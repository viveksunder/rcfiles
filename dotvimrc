set nocompatible
set smartindent
set ignorecase
set smartcase
set scrolloff=20
set tabstop=4
set shiftwidth=4
set expandtab
set hidden
set hlsearch
set number
set nowrap
set noshowmode
set backspace=indent,eol,start "Backspace sometimes does not work when there are indents
" For Jedi Call Signatures
" for ale
let g:ale_completion_enabled = 1

call plug#begin('~/.vim/plugged')
Plug 'mattn/emmet-vim'
Plug 'mkarmona/materialbox'
Plug 'davidhalter/jedi-vim'
Plug 'leafgarland/typescript-vim'
Plug 'nvie/vim-flake8'
Plug 'tpope/vim-eunuch'
Plug 'heavenshell/vim-pydocstring'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'skywind3000/asyncrun.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'janko/vim-test'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
call plug#end()

filetype plugin indent on
syntax on
set path=$PWD/**
let mapleader = '\'
set laststatus=2
autocmd FileType python setlocal completeopt-=preview
autocmd FileType typescript setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
nnoremap <silent> <Tab> :bn<CR>

" Splits
nmap <silent> <Leader>v :vsplit<CR>
nmap <silent> <Leader>h :split<CR>

"Buffer on
map <silent> <Leader>o :on<CR>

"Write file
map <silent> <Leader>w :w<CR>

"Quit window
map <silent> <Leader>q :q<CR>

"Window nav
map [C <C-Right>
map [D <C-Left>
map [A <C-Up>
map [B <C-Down>
map <silent> <C-Right> :wincmd l<CR>
map <silent> <C-Left> :wincmd h<CR>
map <silent> <C-Up> :wincmd k<CR>
map <silent> <C-Down> :wincmd j<CR>

if has('nvim')
    tnoremap <esc><esc> <C-\><C-n>
endif

"Wipe buffer
map <silent> <Leader><BS> :bw<CR> 

" :noh
map <silent> <Leader>- :noh<CR>

" nu nonu toggle
map <silent> <Leader>l :set nu!<CR>

" Nerd Tree Toggle
map <silent> <Leader>] :NERDTreeToggle<CR>

highlight DiffAdd    cterm=bold gui=none guifg=bg guibg=#70B45A
highlight DiffDelete cterm=bold gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold gui=none guifg=bg guibg=Pink
highlight DiffText   cterm=bold gui=none guifg=bg guibg=Red

"colorscheme materialbox

set ttimeoutlen=0
"set t_Co=256
"set foldmethod=indent
set nofoldenable
"set t_ut=
set background=dark

se guifont=Menlo:h12

let g:jedi#use_splits_not_buffers = "left"

autocmd FileType python map <buffer> <Leader>f :call Flake8()<CR>

" vim-pydocstring
nmap <silent> <Leader>' <Plug>(pydocstring)
map <silent> <Leader>\ :FZF<CR>
nmap <silent> <Leader>t :TestFile<CR>
" for vim-test
let test#strategy = "asyncrun"
" for asyncrun so quickfix window opens after process finishes executing
let g:asyncrun_open = 25 
" for asyncrun python tests so python output is not buffered
let $PYTHONUNBUFFERED = 1
" fzf buffer list
nmap <silent> <Leader>b :Buffers<CR>
" ultisnips keys
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
" materialbox theme for terminal
colorscheme materialbox
" apply ale fixers when the file is saved
let g:ale_fix_on_save = 1
" for ale linting
let b:ale_linters = ['flake8', 'pyls']
" ale fixers
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace']
\}
